{"body": "<div class=\"section\" id=\"adding-custom-content-types-to-the-plone-client-connector\">\n<h1>Adding custom content-types to the Plone Client Connector<a class=\"headerlink\" href=\"#adding-custom-content-types-to-the-plone-client-connector\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This documentation explains how to extend the Plone Client Connector with your\nown or custom Plone content-types.</p>\n<p>Custom content-types can be registered with the Produce &amp; Publish server using\nthe Zope Component Architecture. The one single contact of the P&amp;P server with a\ncontent-type is the existence of a <tt class=\"docutils literal\"><span class=\"pre\">&#64;&#64;asHTML</span></tt> view for the related content-type.\nThe <tt class=\"docutils literal\"><span class=\"pre\">&#64;&#64;asHTML</span></tt> view must return a HTML snippet that will be used by the P&amp;P\nwithin the main body of its own rendering PDF template.</p>\n<p>As an example look at the <tt class=\"docutils literal\"><span class=\"pre\">&#64;&#64;asHTML</span></tt> view for Plone news items.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Template and browser views are usually located inside the <tt class=\"docutils literal\"><span class=\"pre\">browser</span></tt> folder\nof your policy package.</p>\n</div>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">&#64;&#64;asHTML</span></tt> view is configured through ZCML (within your\nconfigure.zcml file):</p>\n<div class=\"highlight-python\"><pre>&lt;browser:page\n  name=\"asHTML\"\n  for=\"Products.ATContentTypes.interface.news.IATNewsItem\"\n  permission=\"zope2.View\"\n  class=\".newsitem.HTMLView\"\n  /&gt;</pre>\n</div>\n<p>and implemented as browser view (newsitem.py):</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">Globals</span> <span class=\"kn\">import</span> <span class=\"n\">InitializeClass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Products.Five.browser</span> <span class=\"kn\">import</span> <span class=\"n\">BrowserView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Products.Five.browser.pagetemplatefile</span> <span class=\"kn\">import</span> <span class=\"n\">ViewPageTemplateFile</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HTMLView</span><span class=\"p\">(</span><span class=\"n\">BrowserView</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; This view renders a HMTL fragment for the configured content type &quot;&quot;&quot;</span>\n\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">ViewPageTemplateFile</span><span class=\"p\">(</span><span class=\"s\">&#39;newsitem_raw.pt&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n<span class=\"n\">InitializeClass</span><span class=\"p\">(</span><span class=\"n\">HTMLView</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The related templates renders a snippet of code for a news item\nobject:</p>\n<div class=\"highlight-python\"><pre>&lt;div class=\"type-newsitem document-body\"&gt;\n    &lt;h1 class=\"title bookmark-title\" tal:content=\"context/Title\" /&gt;\n    &lt;div class=\"description\" tal:content=\"context/Description\" /&gt;\n    &lt;div&gt;\n        &lt;div class=\"image-box\" tal:condition=\"nocall: context/image | nothing\"&gt;\n            &lt;img class=\"teaser-image\" src=\"image\" /&gt;\n            &lt;div class=\"image-caption\" tal:content=\"context/getImageCaption | nothing\" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"body\" tal:content=\"structure context/getText\" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</pre>\n</div>\n<p>If a dedicated base class for the browser is not needed then you can register the\ntemplate directly through ZCML:</p>\n<div class=\"highlight-python\"><pre>&lt;browser:page\n  name=\"asHTML\"\n  for=\"Products.ATContentTypes.interface.news.IATNewsItem\"\n  permission=\"zope2.View\"\n  template=\"newsitem_raw.pt\"\n  /&gt;</pre>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">There is no direct convention how to name templates but for the\nsake of consistency it is recommended that you use a naming convention\nlike <strong>mycontenttype_ashtml.pt</strong> or <strong>document_ashtml.pt</strong>.</p>\n</div>\n<p>In addition your content-type implementation <strong>must</strong> provide the\n<tt class=\"docutils literal\"><span class=\"pre\">zopyx.smartprintng.plone.interfaces.IPPContent</span></tt> interface - either by\nspecifying this interface as part of the class definition in your code</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">MyContentType</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IPPContent</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>or you add the interfaces as a marker interface through <tt class=\"docutils literal\"><span class=\"pre\">ZCML</span></tt></p>\n<div class=\"highlight-python\"><pre>&lt;five:implements\n    class=\"my.package.contents.mytype.MyContentType\"\n    interface=\"zopyx.smartprintng.plone.interfaces.IPPContent\"\n/&gt;</pre>\n</div>\n<p>Only content objects providing the <tt class=\"docutils literal\"><span class=\"pre\">IPPContent</span></tt> interface are being considered\nduring the aggregation phase of the Plone Client Connector.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This requirement applies only if your content-type is used from within\nthe Produce &amp; Publish Authoring Environment (aka <em>zopyx.authoring</em> module).</p>\n</div>\n<p>For further example code, please refer to the\n<em>zopyx/smartprintng/plone/browser</em> directory. The <tt class=\"docutils literal\"><span class=\"pre\">folder</span></tt> integration\n<em>(folder.py)</em> shows you a more complex example and involves aggregation of\nother content.</p>\n</div>\n", "display_toc": false, "title": "Adding custom content-types to the Plone Client Connector", "sourcename": "connector/content-types.txt", "customsidebar": null, "current_page_name": "connector/content-types", "next": {"link": "../integration-ploneformgen/", "title": "Integration with PloneFormGen"}, "rellinks": [["genindex", "General Index", "I", "index"], ["connector/integration-ploneformgen", "Integration with PloneFormGen", "N", "next"], ["connector/resource-directories", "Resource directories", "P", "previous"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Adding custom content-types to the Plone Client Connector</a></li>\n</ul>\n", "prev": {"link": "../resource-directories/", "title": "Resource directories"}, "metatags": ""}